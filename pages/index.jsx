import Head from "next/head";
import styles from "../styles/Home.module.css";
import fsPromises from "fs/promises";
import path from "path";
import { useState } from "react";
import { Grid, Container, Card, Image, Text, Button, Group, createStyles, Radio } from "@mantine/core";
import Food from "./food";

const useStyles = createStyles(() => ({
  deleteButton: { position: "absolute", bottom: 10, width: "90%" },
}));

export default function Home(props) {
  const { classes } = useStyles();

  const [foods, setFoods] = useState(() => {
    return props.foods;
  }, null);

  const deleteData = async (id) => {
    // if we had an API, make a call to get the delete the food item
    const response = await (await fetch("/api/food", { method: "DELETE" })).json();
    var foodsTemp = foods.filter((food) => food.id != id);
    setFoods(foodsTemp);
  };

  const addData = async (food) => {
    // if we had an API, make a call to post a new food item
    const response = await (await fetch("/api/food", { method: "POST" })).json();

    var foodsTemp = JSON.parse(JSON.stringify(foods));

    //With React hooks, we can't push a new element on the array. Need to pass a new array to the hook.
    //CORB (cross origin read blocking) issue when adding a URL.This should't be an issue if using an API.
    foodsTemp.push({
      id: foods.length,
      name: food.foodName,
      calories: food.calories,
      macro: food.macro,
      micro: food.micro,
      image: food.imageUrl,
    });

    setFoods(foodsTemp);
  };

  return (
    <div>
      <Head>
        <title>MFP POC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container my="md">
        <Grid>
          {foods.map((food) => (
            //segment foods based on color. if a food is less 200 calories, consider it a snack
            <Grid.Col
              key={food.id}
              sm={4}
              radius="md"
              style={food.calories < 200 ? { backgroundColor: "beige" } : { backgroundColor: "aliceblue" }}
            >
              <Card shadow="sm" p="lg" radius="md" withBorder style={{ minHeight: 580 }}>
                <Card.Section>
                  <Image src={food.image} height={160} alt="Food" />
                </Card.Section>
                <Group position="center" mt="md" mb="xs">
                  <Text weight={600}>Calories: {food.calories}</Text>
                </Group>
                <Group position="center" mt="md" mb="xs">
                  <Text weight={600}>{food.name}</Text>
                </Group>
                <Group position="center" mt="md" mb="xs">
                  <Text weight={300}>Macronutrients</Text>
                  <Text size="sm" color="dimmed">
                    {food.macro}
                  </Text>
                  <Text weight={300}>Micronutrients</Text>
                  <Text size="sm" color="dimmed" style={{ paddingBottom: 20 }}>
                    {food.micro}
                  </Text>
                  <Button
                    className={classes.deleteButton}
                    variant="light"
                    color="red"
                    fullWidth
                    mt="md"
                    radius="md"
                    onClick={() => {
                      deleteData(food.id);
                    }}
                  >
                    Delete
                  </Button>
                </Group>
              </Card>
            </Grid.Col>
          ))}
          <Grid.Col sm={4}>
            <Food addData={addData}></Food>
          </Grid.Col>
        </Grid>
      </Container>
    </div>
  );
}

// load from local data file.

export async function getStaticProps() {
  // TODO - determine why a popup was displayed in Chrome on Mac to allow for local file access. Is this just in develop environment?
  const filePath = path.join(process.cwd(), "data.json");
  const jsonData = await fsPromises.readFile(filePath);
  const objectData = JSON.parse(jsonData);
  return {
    props: objectData,
  };
}
